{"ast":null,"code":"var _jsxFileName = \"/home/eiramsg/organiser-app/src/components/Reminders/CreateReminder.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { TextField, Button, makeStyles, FormGroup, Checkbox, Typography, List, ListItem, ListItemIcon, ListItemText, Grid } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst reminderStyle = makeStyles({\n  textfield1: {\n    width: \"50%\",\n    position: \"sticky\"\n  },\n  textfield2: {\n    width: \"200px\",\n    position: \"sticky\"\n  },\n  form: {\n    position: \"sticky\"\n  }\n});\n\nfunction CreateReminder() {\n  _s();\n\n  const classes = reminderStyle();\n  const [allReminders, setAllReminders] = useState([]);\n  const [reminders, setReminders] = useState({\n    id: 0,\n    title: null,\n    due: null,\n    completed: false\n  });\n  const [date, setDate] = useState(\"\");\n  let count = allReminders.length;\n\n  const addSingleReminder = reminders => {\n    setAllReminders([...allReminders, reminders]);\n  };\n\n  const onChecked = id => {\n    const newReminders = allReminders.filter(elem => elem.id != id);\n    setAllReminders(newReminders);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n      className: classes.form,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        justifyContent: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Reminder\",\n          id: \"margin-none\",\n          variant: \"outlined\",\n          className: classes.textfield1,\n          multiline: true,\n          required: true,\n          onChange: e => setReminders({ ...reminders,\n            title: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          type: \"date\",\n          className: classes.textfield2,\n          variant: \"outlined\",\n          required: true,\n          onChange: e => setDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        justifyContent: \"center\",\n        style: {\n          paddingTop: \"20px\"\n        },\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          disableElevation: true,\n          variant: \"contained\",\n          color: \"secondary\",\n          onClick: e => {\n            e.preventDefault();\n            addSingleReminder({ ...reminders,\n              id: count++\n            });\n          },\n          children: \"Add Reminder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this), allReminders.length > 0 ? allReminders.map(reminders => /*#__PURE__*/_jsxDEV(Grid, {\n      container: true,\n      justifyContent: \"center\",\n      children: /*#__PURE__*/_jsxDEV(List, {\n        children: /*#__PURE__*/_jsxDEV(ListItem, {\n          children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n            children: /*#__PURE__*/_jsxDEV(Checkbox, {\n              id: reminders.id,\n              checked: reminders.completed,\n              name: reminders.id,\n              onChange: () => onChecked(reminders.id)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n            primary: reminders.title,\n            secondary: date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 15\n        }, this)\n      }, reminders.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(Typography, {\n      color: \"textPrimary\",\n      style: {\n        margin: \"10px\"\n      },\n      children: \"No Reminders Yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateReminder, \"e7jUAUiJsI5UR1xfj2cRBaatUiw=\");\n\n_c = CreateReminder;\nexport default CreateReminder;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateReminder\");","map":{"version":3,"sources":["/home/eiramsg/organiser-app/src/components/Reminders/CreateReminder.js"],"names":["React","useState","TextField","Button","makeStyles","FormGroup","Checkbox","Typography","List","ListItem","ListItemIcon","ListItemText","Grid","reminderStyle","textfield1","width","position","textfield2","form","CreateReminder","classes","allReminders","setAllReminders","reminders","setReminders","id","title","due","completed","date","setDate","count","length","addSingleReminder","onChecked","newReminders","filter","elem","e","target","value","paddingTop","preventDefault","map","margin"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  TextField,\n  Button,\n  makeStyles,\n  FormGroup,\n  Checkbox,\n  Typography,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Grid,\n} from \"@material-ui/core\";\n\nconst reminderStyle = makeStyles({\n  textfield1: {\n    width: \"50%\",\n    position: \"sticky\",\n\n  },\n\n  textfield2: {\n    width: \"200px\",\n    position: \"sticky\",\n  },\n\n  form: {\n    position: \"sticky\",\n  },\n});\n\nfunction CreateReminder() {\n  const classes = reminderStyle();\n  const [allReminders, setAllReminders] = useState([]);\n  const [reminders, setReminders] = useState({\n    id: 0,\n    title: null,\n    due: null,\n    completed: false,\n  });\n\n  const [date, setDate] = useState(\"\");\n  let count = allReminders.length;\n\n  const addSingleReminder = (reminders) => {\n    setAllReminders([...allReminders, reminders]);\n  };\n\n  const onChecked = (id) => {\n    const newReminders = allReminders.filter((elem) => elem.id != id);\n    setAllReminders(newReminders);\n  };\n\n  return (\n    <div>\n      <FormGroup className={classes.form}>\n        <Grid container justifyContent=\"center\">\n          <TextField\n            label=\"Reminder\"\n            id=\"margin-none\"\n            variant=\"outlined\"\n            className={classes.textfield1}\n            multiline\n            required\n            onChange={(e) =>\n              setReminders({\n                ...reminders,\n                title: e.target.value,\n              })\n            }\n          />\n          <TextField\n            type=\"date\"\n            className={classes.textfield2}\n            variant=\"outlined\"\n            required\n            onChange={(e) => setDate(e.target.value)}\n          />\n        </Grid>\n        <Grid container justifyContent=\"center\" style={{paddingTop: \"20px\"}}>\n          <Button\n            type=\"submit\"\n            disableElevation\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={(e) => {\n              e.preventDefault();\n              addSingleReminder({\n                ...reminders,\n                id: count++,\n              });\n            }}\n          >\n            Add Reminder\n          </Button>\n        </Grid>\n      </FormGroup>\n\n      {allReminders.length > 0 ? (\n        allReminders.map((reminders) => (\n          <Grid container justifyContent=\"center\">\n            <List key={reminders.id}>\n              <ListItem>\n                <ListItemIcon>\n                  <Checkbox\n                    id={reminders.id}\n                    checked={reminders.completed}\n                    name={reminders.id}\n                    onChange={() => onChecked(reminders.id)}\n                  />\n                </ListItemIcon>\n                <ListItemText primary={reminders.title} secondary={date} />\n              </ListItem>\n            </List>\n          </Grid>\n        ))\n      ) : (\n        <Typography color=\"textPrimary\" style={{ margin: \"10px\" }}>No Reminders Yet</Typography>\n      )}\n    </div>\n  );\n}\n\nexport default CreateReminder;\n"]},"metadata":{},"sourceType":"module"}