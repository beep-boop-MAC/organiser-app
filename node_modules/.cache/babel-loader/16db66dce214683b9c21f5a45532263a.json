{"ast":null,"code":"var _jsxFileName = \"/mnt/c/Users/sheku/WebstormProjects/organiser-app/src/components/Reminders/CreateReminder.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { TextField, Button, makeStyles, FormGroup, Checkbox, Typography, List, ListItem, ListItemIcon, ListItemText, Grid } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst reminderStyle = makeStyles({\n  textfield1: {\n    width: \"50%\",\n    position: \"sticky\",\n    padding: \"0.7rem\"\n  },\n  textfield2: {\n    width: \"200px\",\n    position: \"sticky\",\n    padding: \"0.7rem\"\n  },\n  form: {\n    position: \"sticky\"\n  },\n  button: {\n    marginLeft: \"13px\"\n  }\n});\n\nfunction CreateReminder({\n  onSubmitFunc,\n  allReminders,\n  onChecked\n}) {\n  _s();\n\n  const classes = reminderStyle(); // const [allReminders, setAllReminders] = useState([]);\n\n  const [reminders, setReminders] = useState({\n    id: 0,\n    title: null,\n    due: null,\n    completed: false\n  });\n  const [date, setDate] = useState(\"\");\n  let count = allReminders.length; // const addSingleReminder = (reminders) => {\n  //   setAllReminders([...allReminders, reminders]);\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n      className: classes.form,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: [/*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Reminder\",\n          id: \"margin-none\",\n          variant: \"outlined\",\n          className: classes.textfield1,\n          multiline: true,\n          required: true,\n          onChange: e => setReminders({ ...reminders,\n            title: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          value: reminders.due,\n          type: \"date\",\n          className: classes.textfield2,\n          variant: \"outlined\",\n          required: true,\n          onChange: e => setDate(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          disableElevation: true,\n          variant: \"contained\",\n          className: classes.button,\n          color: \"secondary\",\n          onClick: e => {\n            e.preventDefault();\n            onSubmitFunc({ ...reminders,\n              id: count++\n            });\n          },\n          children: \"Add Reminder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), allReminders.length > 0 ? allReminders.map(reminders => /*#__PURE__*/_jsxDEV(List, {\n      children: /*#__PURE__*/_jsxDEV(ListItem, {\n        children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n          children: /*#__PURE__*/_jsxDEV(Checkbox, {\n            id: reminders.id,\n            checked: reminders.completed,\n            name: reminders.id,\n            onChange: () => onChecked(reminders.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: reminders.title,\n          secondary: date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this)\n    }, reminders.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(Typography, {\n      children: \"No Reminders Yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateReminder, \"CSJUD3YMpKz/4Rg8YEjiZizgsnE=\");\n\n_c = CreateReminder;\nexport default CreateReminder;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateReminder\");","map":{"version":3,"sources":["/mnt/c/Users/sheku/WebstormProjects/organiser-app/src/components/Reminders/CreateReminder.js"],"names":["React","useState","TextField","Button","makeStyles","FormGroup","Checkbox","Typography","List","ListItem","ListItemIcon","ListItemText","Grid","reminderStyle","textfield1","width","position","padding","textfield2","form","button","marginLeft","CreateReminder","onSubmitFunc","allReminders","onChecked","classes","reminders","setReminders","id","title","due","completed","date","setDate","count","length","e","target","value","preventDefault","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SACEC,SADF,EAEEC,MAFF,EAGEC,UAHF,EAIEC,SAJF,EAKEC,QALF,EAMEC,UANF,EAOEC,IAPF,EAQEC,QARF,EASEC,YATF,EAUEC,YAVF,EAWEC,IAXF,QAYO,mBAZP;;AAcA,MAAMC,aAAa,GAAGT,UAAU,CAAC;AAC/BU,EAAAA,UAAU,EAAE;AACVC,IAAAA,KAAK,EAAE,KADG;AAEVC,IAAAA,QAAQ,EAAE,QAFA;AAGVC,IAAAA,OAAO,EAAE;AAHC,GADmB;AAO/BC,EAAAA,UAAU,EAAE;AACVH,IAAAA,KAAK,EAAE,OADG;AAEVC,IAAAA,QAAQ,EAAE,QAFA;AAGVC,IAAAA,OAAO,EAAE;AAHC,GAPmB;AAa/BE,EAAAA,IAAI,EAAE;AACJH,IAAAA,QAAQ,EAAE;AADN,GAbyB;AAiB/BI,EAAAA,MAAM,EAAE;AACNC,IAAAA,UAAU,EAAG;AADP;AAjBuB,CAAD,CAAhC;;AAsBA,SAASC,cAAT,CAAwB;AAACC,EAAAA,YAAD;AAAeC,EAAAA,YAAf;AAA6BC,EAAAA;AAA7B,CAAxB,EAAiE;AAAA;;AAC/D,QAAMC,OAAO,GAAGb,aAAa,EAA7B,CAD+D,CAE/D;;AACA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4B3B,QAAQ,CAAC;AACzC4B,IAAAA,EAAE,EAAE,CADqC;AAEzCC,IAAAA,KAAK,EAAE,IAFkC;AAGzCC,IAAAA,GAAG,EAAE,IAHoC;AAIzCC,IAAAA,SAAS,EAAE;AAJ8B,GAAD,CAA1C;AAOA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBjC,QAAQ,CAAC,EAAD,CAAhC;AACA,MAAIkC,KAAK,GAAGX,YAAY,CAACY,MAAzB,CAX+D,CAa/D;AACA;AACA;;AAGA,sBACE;AAAA,4BACE,QAAC,SAAD;AAAW,MAAA,SAAS,EAAEV,OAAO,CAACP,IAA9B;AAAA,8BACE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAA,gCACE,QAAC,SAAD;AACE,UAAA,KAAK,EAAC,UADR;AAEE,UAAA,EAAE,EAAC,aAFL;AAGE,UAAA,OAAO,EAAC,UAHV;AAIE,UAAA,SAAS,EAAEO,OAAO,CAACZ,UAJrB;AAKE,UAAA,SAAS,MALX;AAME,UAAA,QAAQ,MANV;AAOE,UAAA,QAAQ,EAAGuB,CAAD,IACRT,YAAY,CAAC,EACX,GAAGD,SADQ;AAEXG,YAAAA,KAAK,EAAEO,CAAC,CAACC,MAAF,CAASC;AAFL,WAAD;AARhB;AAAA;AAAA;AAAA;AAAA,gBADF,eAeE,QAAC,SAAD;AACI,UAAA,KAAK,EAAEZ,SAAS,CAACI,GADrB;AAEE,UAAA,IAAI,EAAC,MAFP;AAGE,UAAA,SAAS,EAAEL,OAAO,CAACR,UAHrB;AAIE,UAAA,OAAO,EAAC,UAJV;AAKE,UAAA,QAAQ,MALV;AAME,UAAA,QAAQ,EAAGmB,CAAD,IACRH,OAAO,CAACG,CAAC,CAACC,MAAF,CAASC,KAAV;AAPX;AAAA;AAAA;AAAA;AAAA,gBAfF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eA2BE,QAAC,IAAD;AAAM,QAAA,SAAS,MAAf;AAAA,+BACE,QAAC,MAAD;AACE,UAAA,IAAI,EAAC,QADP;AAEE,UAAA,gBAAgB,MAFlB;AAGE,UAAA,OAAO,EAAC,WAHV;AAIE,UAAA,SAAS,EAAEb,OAAO,CAACN,MAJrB;AAKE,UAAA,KAAK,EAAC,WALR;AAME,UAAA,OAAO,EAAGiB,CAAD,IAAO;AACdA,YAAAA,CAAC,CAACG,cAAF;AACAjB,YAAAA,YAAY,CAAC,EACX,GAAGI,SADQ;AAEXE,cAAAA,EAAE,EAAEM,KAAK;AAFE,aAAD,CAAZ;AAKD,WAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cA3BF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAgDGX,YAAY,CAACY,MAAb,GAAsB,CAAtB,GACCZ,YAAY,CAACiB,GAAb,CAAkBd,SAAD,iBACf,QAAC,IAAD;AAAA,6BACE,QAAC,QAAD;AAAA,gCACE,QAAC,YAAD;AAAA,iCACE,QAAC,QAAD;AACE,YAAA,EAAE,EAAEA,SAAS,CAACE,EADhB;AAEE,YAAA,OAAO,EAAEF,SAAS,CAACK,SAFrB;AAGE,YAAA,IAAI,EAAEL,SAAS,CAACE,EAHlB;AAIE,YAAA,QAAQ,EAAE,MAAMJ,SAAS,CAACE,SAAS,CAACE,EAAX;AAJ3B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBADF,eASE,QAAC,YAAD;AAAc,UAAA,OAAO,EAAEF,SAAS,CAACG,KAAjC;AAAwC,UAAA,SAAS,EAAEG;AAAnD;AAAA;AAAA;AAAA;AAAA,gBATF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF,OAAWN,SAAS,CAACE,EAArB;AAAA;AAAA;AAAA;AAAA,YADF,CADD,gBAiBC,QAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAjEJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsED;;GAxFQP,c;;KAAAA,c;AA0FT,eAAeA,cAAf","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  TextField,\n  Button,\n  makeStyles,\n  FormGroup,\n  Checkbox,\n  Typography,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Grid,\n} from \"@material-ui/core\";\n\nconst reminderStyle = makeStyles({\n  textfield1: {\n    width: \"50%\",\n    position: \"sticky\",\n    padding: \"0.7rem\",\n  },\n\n  textfield2: {\n    width: \"200px\",\n    position: \"sticky\",\n    padding: \"0.7rem\",\n  },\n\n  form: {\n    position: \"sticky\",\n  },\n\n  button: {\n    marginLeft : \"13px\"\n  }\n});\n\nfunction CreateReminder({onSubmitFunc, allReminders, onChecked}) {\n  const classes = reminderStyle();\n  // const [allReminders, setAllReminders] = useState([]);\n  const [reminders, setReminders] = useState({\n    id: 0,\n    title: null,\n    due: null,\n    completed: false,\n  });\n\n  const [date, setDate] = useState(\"\");\n  let count = allReminders.length;\n\n  // const addSingleReminder = (reminders) => {\n  //   setAllReminders([...allReminders, reminders]);\n  // };\n\n\n  return (\n    <div>\n      <FormGroup className={classes.form}>\n        <Grid container>\n          <TextField\n            label=\"Reminder\"\n            id=\"margin-none\"\n            variant=\"outlined\"\n            className={classes.textfield1}\n            multiline\n            required\n            onChange={(e) =>\n              setReminders({\n                ...reminders,\n                title: e.target.value,\n              })\n            }\n          />\n          <TextField\n              value={reminders.due}\n            type=\"date\"\n            className={classes.textfield2}\n            variant=\"outlined\"\n            required\n            onChange={(e) =>\n              setDate(e.target.value)\n            }\n          />\n        </Grid>\n        <Grid container>\n          <Button\n            type=\"submit\"\n            disableElevation\n            variant=\"contained\"\n            className={classes.button}\n            color=\"secondary\"\n            onClick={(e) => {\n              e.preventDefault();\n              onSubmitFunc({\n                ...reminders,\n                id: count++\n              })\n\n            }}\n          >\n            Add Reminder\n          </Button>\n        </Grid>\n      </FormGroup>\n      {allReminders.length > 0 ? (\n        allReminders.map((reminders) => (\n          <List key={reminders.id}>\n            <ListItem>\n              <ListItemIcon>\n                <Checkbox\n                  id={reminders.id}\n                  checked={reminders.completed}\n                  name={reminders.id}\n                  onChange={() => onChecked(reminders.id)}\n                />\n              </ListItemIcon>\n              <ListItemText primary={reminders.title} secondary={date}/>\n            </ListItem>\n          </List>\n        ))\n      ) : (\n        <Typography>No Reminders Yet</Typography>\n      )}\n    </div>\n  );\n}\n\nexport default CreateReminder;\n"]},"metadata":{},"sourceType":"module"}