{"ast":null,"code":"var _jsxFileName = \"/home/eiramsg/organiser-app/src/components/Reminders/CreateReminder.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { TextField, Button, makeStyles, FormGroup, Checkbox, Typography, List, ListItem, ListItemIcon, ListItemText, Grid } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst reminderStyle = makeStyles({\n  textfield1: {\n    width: \"250px\",\n    position: \"sticky\",\n    padding: \"0.7rem\"\n  },\n  textfield2: {\n    width: \"200px\",\n    position: \"sticky\",\n    padding: \"0.7rem\"\n  },\n  form: {\n    position: \"sticky\"\n  }\n});\n\nfunction CreateReminder() {\n  _s();\n\n  const classes = reminderStyle();\n  const [allReminders, setAllReminders] = useState([]);\n  const [reminders, setReminders] = useState({\n    title: null,\n    due: null,\n    completed: false\n  });\n  let count = allReminders.length;\n\n  const addSingleReminder = reminders => {\n    setAllReminders([...allReminders, reminders]);\n  };\n\n  const onChecked = id => {\n    const newReminders = allReminders;\n    let toChange = newReminders[id];\n    toChange.completed = !toChange.completed;\n    newReminders[id] = toChange;\n    setAllReminders([...newReminders]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n      className: classes.form,\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          disableElevation: true,\n          variant: \"contained\",\n          className: classes.button,\n          color: \"secondary\",\n          onSubmit: e => {\n            e.preventDefault();\n            addSingleReminder({ ...reminders,\n              id: count++\n            });\n          },\n          children: \"Add Reminder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          label: \"Reminder\",\n          id: \"margin-none\",\n          variant: \"outlined\",\n          className: classes.textfield1,\n          multiline: true,\n          required: true,\n          onChange: e => setReminders({ ...reminders,\n            title: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TextField, {\n          type: \"date\",\n          className: classes.textfield2,\n          variant: \"outlined\",\n          required: true,\n          onChange: e => setReminders({ ...reminders,\n            message: e.target.value\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), allReminders.length > 0 ? allReminders.map(reminders => /*#__PURE__*/_jsxDEV(List, {\n      children: /*#__PURE__*/_jsxDEV(ListItem, {\n        children: [/*#__PURE__*/_jsxDEV(ListItemIcon, {\n          children: /*#__PURE__*/_jsxDEV(Checkbox, {\n            id: reminders.id,\n            checked: reminders.completed,\n            name: reminders.id,\n            onChange: () => onChecked(reminders.id)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(ListItemText, {\n          primary: reminders.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this)\n    }, reminders.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(Typography, {\n      children: \"No Reminders Yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateReminder, \"tRu1C6R8KnKMFisxhhDWWTLYUCQ=\");\n\n_c = CreateReminder;\nexport default CreateReminder;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateReminder\");","map":{"version":3,"sources":["/home/eiramsg/organiser-app/src/components/Reminders/CreateReminder.js"],"names":["React","useState","TextField","Button","makeStyles","FormGroup","Checkbox","Typography","List","ListItem","ListItemIcon","ListItemText","Grid","reminderStyle","textfield1","width","position","padding","textfield2","form","CreateReminder","classes","allReminders","setAllReminders","reminders","setReminders","title","due","completed","count","length","addSingleReminder","onChecked","id","newReminders","toChange","button","e","preventDefault","target","value","message","map"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  TextField,\n  Button,\n  makeStyles,\n  FormGroup,\n  Checkbox,\n  Typography,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText,\n  Grid,\n} from \"@material-ui/core\";\n\nconst reminderStyle = makeStyles({\n  textfield1: {\n    width: \"250px\",\n    position: \"sticky\",\n    padding: \"0.7rem\",\n  },\n\n  textfield2: {\n    width: \"200px\",\n    position: \"sticky\",\n    padding: \"0.7rem\",\n  },\n\n  form: {\n    position: \"sticky\",\n  },\n});\n\nfunction CreateReminder() {\n  const classes = reminderStyle();\n\n  const [allReminders, setAllReminders] = useState([]);\n  const [reminders, setReminders] = useState({\n    title: null,\n    due: null,\n    completed: false,\n  });\n\n  let count = allReminders.length;\n\n  const addSingleReminder = (reminders) => {\n    setAllReminders([...allReminders, reminders]);\n  };\n\n  const onChecked = (id) => {\n    const newReminders = allReminders;\n\n    let toChange = newReminders[id];\n\n    toChange.completed = !toChange.completed;\n\n    newReminders[id] = toChange;\n\n    setAllReminders([...newReminders]);\n  };\n\n  return (\n    <div>\n      <FormGroup className={classes.form}>\n        <Grid>\n          <Button\n            type=\"submit\"\n            disableElevation\n            variant=\"contained\"\n            className={classes.button}\n            color=\"secondary\"\n            onSubmit={(e) => {\n              e.preventDefault();\n              addSingleReminder({\n                ...reminders,\n                id: count++,\n              });\n            }}\n          >\n            Add Reminder\n          </Button>\n\n          <TextField\n            label=\"Reminder\"\n            id=\"margin-none\"\n            variant=\"outlined\"\n            className={classes.textfield1}\n            multiline\n            required\n            onChange={(e) =>\n              setReminders({\n                ...reminders,\n                title: e.target.value,\n              })\n            }\n          />\n\n          <TextField\n            type=\"date\"\n            className={classes.textfield2}\n            variant=\"outlined\"\n            required\n            onChange={(e) =>\n              setReminders({\n                ...reminders,\n                message: e.target.value,\n              })\n            }\n          />\n        </Grid>\n      </FormGroup>\n\n      {allReminders.length > 0 ? (\n        allReminders.map((reminders) => (\n          <List key={reminders.id}>\n            <ListItem>\n              <ListItemIcon>\n                <Checkbox\n                  id={reminders.id}\n                  checked={reminders.completed}\n                  name={reminders.id}\n                  onChange={() => onChecked(reminders.id)}\n                />\n              </ListItemIcon>\n              <ListItemText primary={reminders.title} />\n            </ListItem>\n          </List>\n        ))\n      ) : (\n        <Typography>No Reminders Yet</Typography>\n      )}\n    </div>\n  );\n}\n\nexport default CreateReminder;\n"]},"metadata":{},"sourceType":"module"}