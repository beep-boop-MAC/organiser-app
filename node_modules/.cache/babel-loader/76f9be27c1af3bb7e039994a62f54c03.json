{"ast":null,"code":"var _jsxFileName = \"/home/eiramsg/organiser-app/src/components/Reminders/CreateReminder.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { TextField, Button, makeStyles, FormGroup, Checkbox, Typography } from \"@material-ui/core\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst reminderStyle = makeStyles({\n  textfield1: {\n    width: \"250px\",\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-100%, -305%)\"\n  },\n  textfield2: {\n    width: \"200px\",\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    transform: \"translate(10%, -300%)\"\n  },\n  form: {\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-15%, -300%)\"\n  }\n});\n\nfunction CreateReminder() {\n  _s();\n\n  const classes = reminderStyle();\n  const [allReminders, setAllReminders] = useState([]);\n  const [reminders, setReminders] = useState({\n    title: null,\n    due: null,\n    completed: false\n  });\n  let count = allReminders.length;\n\n  const addSingleReminder = reminders => {\n    setAllReminders([...allReminders, reminders]);\n  };\n\n  const onChecked = id => {\n    const newReminders = allReminders;\n    let toChange = newReminders[id];\n    toChange.completed = !toChange.completed;\n    newReminders[id] = toChange;\n    setAllReminders([...newReminders]);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n      className: classes.form,\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        type: \"submit\",\n        disableElevation: true,\n        variant: \"contained\",\n        className: classes.button,\n        color: \"secondary\",\n        onSubmit: e => {\n          e.preventDefault();\n          addSingleReminder({ ...reminders,\n            id: count++\n          });\n        },\n        children: \"Add Reminder\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        label: \"Reminder\",\n        id: \"margin-none\",\n        variant: \"outlined\",\n        className: classes.textfield1,\n        multiline: true,\n        required: true,\n        onChange: e => setReminders({ ...reminders,\n          title: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TextField, {\n        type: \"date\",\n        className: classes.textfield2,\n        variant: \"outlined\",\n        required: true,\n        onChange: e => setReminders({ ...reminders,\n          message: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), allTodo.length > 0 ? allTodo.map(todo => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        name: todo.id,\n        type: \"checkbox\",\n        id: todo.id,\n        checked: todo.completed,\n        onChange: () => onChecked(todo.id)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: todo.id,\n        children: [\"Title: \", todo.title, \" Message: \", todo.message, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this)]\n    }, todo.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 11\n    }, this)) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"No Todos Yet\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CreateReminder, \"tRu1C6R8KnKMFisxhhDWWTLYUCQ=\");\n\n_c = CreateReminder;\nexport default CreateReminder;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateReminder\");","map":{"version":3,"sources":["/home/eiramsg/organiser-app/src/components/Reminders/CreateReminder.js"],"names":["React","useState","TextField","Button","makeStyles","FormGroup","Checkbox","Typography","reminderStyle","textfield1","width","position","left","top","transform","textfield2","form","CreateReminder","classes","allReminders","setAllReminders","reminders","setReminders","title","due","completed","count","length","addSingleReminder","onChecked","id","newReminders","toChange","button","e","preventDefault","target","value","message","allTodo","map","todo"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  TextField,\n  Button,\n  makeStyles,\n  FormGroup,\n  Checkbox,\n  Typography,\n} from \"@material-ui/core\";\n\nconst reminderStyle = makeStyles({\n  textfield1: {\n    width: \"250px\",\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-100%, -305%)\",\n  },\n\n  textfield2: {\n    width: \"200px\",\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    transform: \"translate(10%, -300%)\",\n  },\n\n  form: {\n    position: \"absolute\",\n    left: \"50%\",\n    top: \"50%\",\n    transform: \"translate(-15%, -300%)\",\n  },\n});\n\nfunction CreateReminder() {\n  const classes = reminderStyle();\n\n  const [allReminders, setAllReminders] = useState([]);\n  const [reminders, setReminders] = useState({\n    title: null,\n    due: null,\n    completed: false,\n  });\n\n  let count = allReminders.length;\n\n  const addSingleReminder = (reminders) => {\n    setAllReminders([...allReminders, reminders]);\n  };\n\n  const onChecked = (id) => {\n    const newReminders = allReminders;\n\n    let toChange = newReminders[id];\n\n    toChange.completed = !toChange.completed;\n\n    newReminders[id] = toChange;\n\n    setAllReminders([...newReminders]);\n  };\n\n  return (\n    <div>\n      <FormGroup className={classes.form}>\n        <Button\n          type=\"submit\"\n          disableElevation\n          variant=\"contained\"\n          className={classes.button}\n          color=\"secondary\"\n          onSubmit={(e) => {\n            e.preventDefault();\n            addSingleReminder({\n              ...reminders,\n              id: count++,\n            });\n          }}\n        >\n          Add Reminder\n        </Button>\n\n        <TextField\n          label=\"Reminder\"\n          id=\"margin-none\"\n          variant=\"outlined\"\n          className={classes.textfield1}\n          multiline\n          required\n          onChange={(e) =>\n            setReminders({\n              ...reminders,\n              title: e.target.value,\n            })\n          }\n        />\n\n        <TextField\n          type=\"date\"\n          className={classes.textfield2}\n          variant=\"outlined\"\n          required\n          onChange={(e) =>\n            setReminders({\n              ...reminders,\n              message: e.target.value,\n            })\n          }\n        />\n      </FormGroup>\n\n      {allTodo.length > 0 ? (\n        allTodo.map((todo) => (\n          <div key={todo.id}>\n            <input\n              name={todo.id}\n              type=\"checkbox\"\n              id={todo.id}\n              checked={todo.completed}\n              onChange={() => onChecked(todo.id)}\n            ></input>\n            <label htmlFor={todo.id}>\n              Title: {todo.title} Message: {todo.message}{\" \"}\n            </label>\n          </div>\n        ))\n      ) : (\n        <h2>No Todos Yet</h2>\n      )}\n    </div>\n  );\n}\n\nexport default CreateReminder;\n"]},"metadata":{},"sourceType":"module"}